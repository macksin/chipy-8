chip8_fontset = [ 
  0xF0, 0x90, 0x90, 0x90, 0xF0, # 0
  0x20, 0x60, 0x20, 0x20, 0x70, # 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, # 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, # 3
  0x90, 0x90, 0xF0, 0x10, 0x10, # 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, # 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, # 6
  0xF0, 0x10, 0x20, 0x40, 0x40, # 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, # 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, # 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, # A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, # B
  0xF0, 0x80, 0x80, 0x80, 0xF0, # C
  0xE0, 0x90, 0x90, 0x90, 0xE0, # D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, # E
  0xF0, 0x80, 0xF0, 0x80, 0x80  # F
]

class CPU():
    """
    docstring
    """
    
    def __init__(self):
        self.opcode = 0
        self.memory = [None] * 4096 # 4096 locations
        self.registers = [None] * 16 # 16 registers
        self.i = 0
        self.pc = 0x200 # program counter starts
        self.gfs = [None] * (64 * 32) # 64 * 32
        self.stack = [None] * 16
        self.sp = 0 # reset stack ppinter
        self.key = [None] * 16 # 16 hex

        # Init fontset
        for i, c in enumerate(chip8_fontset):
            self.memory[i] = hex(c)

        

    def fetch_opcode(self):
        curr = int(self.memory[self.pc], 16) << 8 | int(self.memory[self.pc+1], 16)
        self.opcode = hex(curr)
        return self.opcode

    def decode_opcode(self):
        return hex(int(self.opcode, 16) & 0x0fff)